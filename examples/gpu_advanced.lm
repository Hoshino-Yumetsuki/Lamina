// Advanced GPU acceleration examples
print("=== GPU Acceleration Demo ===\n");

// Example 1: Vector operations
print("1. Vector Operations:");

@gpu
func vector_dot_product(a1, a2, b1, b2, c1, c2) {
    return a1 * b1 + a2 * b2 + c1 * c2;
}

@gpu
func vector_magnitude(x, y, z) {
    var sum = x * x + y * y + z * z;
    return sqrt(sum);
}

print("  Dot product (GPU):", vector_dot_product(1, 2, 3, 4, 5, 6));
print("  Vector magnitude (GPU):", vector_magnitude(3, 4, 5));

// Example 2: Mathematical computations
print("\n2. Mathematical Computations:");

@gpu
func gpu_factorial_iterative(n) {
    var result = 1;
    var i = 1;
    while (i <= n) {
        result = result * i;
        i = i + 1;
    }
    return result;
}

@gpu
func gpu_fibonacci(n) {
    if (n <= 1) {
        return n;
    }
    var a = 0;
    var b = 1;
    var i = 2;
    while (i <= n) {
        var temp = a + b;
        a = b;
        b = temp;
        i = i + 1;
    }
    return b;
}

print("  10! (GPU) =", gpu_factorial_iterative(10));
print("  Fibonacci(15) (GPU) =", gpu_fibonacci(15));

// Example 3: Numerical analysis
print("\n3. Numerical Analysis:");

@gpu
func gpu_power_sum(n, p) {
    var sum = 0;
    var i = 1;
    while (i <= n) {
        sum = sum + i ^ p;
        i = i + 1;
    }
    return sum;
}

@gpu
func gpu_polynomial(x, a, b, c) {
    return a * x * x + b * x + c;
}

print("  Sum of squares 1² + 2² + ... + 10² (GPU):", gpu_power_sum(10, 2));
print("  Polynomial 2x² + 3x + 1 at x=5 (GPU):", gpu_polynomial(5, 2, 3, 1));

// Example 4: Matrix-like operations (simulated with scalars)
print("\n4. Matrix Operations (simplified):");

@gpu
func matrix_element_multiply(a11, a12, b11, b12) {
    var c11 = a11 * b11;
    var c12 = a12 * b12;
    return c11 + c12;
}

print("  Matrix element sum (GPU):", matrix_element_multiply(2, 3, 4, 5));

print("\n=== GPU Demo Completed ===");
