// Edge cases and validation test for @gpu annotation
print("=== GPU Annotation Edge Cases Test ===\n");

// Test 1: Multiple GPU functions
print("Test 1: Multiple GPU functions");
@gpu
func gpu_func1(x) {
    return x + 1;
}

@gpu
func gpu_func2(x) {
    return x + 2;
}

@gpu
func gpu_func3(x) {
    return x + 3;
}

print("  gpu_func1(5) =", gpu_func1(5));
print("  gpu_func2(5) =", gpu_func2(5));
print("  gpu_func3(5) =", gpu_func3(5));

// Test 2: Mixed GPU and regular functions
print("\nTest 2: Mixed GPU and regular functions");

func regular_add(a, b) {
    return a + b;
}

@gpu
func gpu_add(a, b) {
    return a + b;
}

print("  regular_add(3, 4) =", regular_add(3, 4));
print("  gpu_add(3, 4) =", gpu_add(3, 4));

// Test 3: GPU function with no parameters
print("\nTest 3: GPU function with no parameters");

@gpu
func gpu_constant() {
    return 42;
}

print("  gpu_constant() =", gpu_constant());

// Test 4: GPU function with many parameters
print("\nTest 4: GPU function with many parameters");

@gpu
func gpu_sum_many(a, b, c, d, e) {
    return a + b + c + d + e;
}

print("  gpu_sum_many(1,2,3,4,5) =", gpu_sum_many(1, 2, 3, 4, 5));

// Test 5: GPU function calling another function
print("\nTest 5: GPU function calling another function");

func helper(x) {
    return x * 2;
}

@gpu
func gpu_with_call(x) {
    return helper(x) + 1;
}

print("  gpu_with_call(5) =", gpu_with_call(5));

// Test 6: Nested control flow in GPU function
print("\nTest 6: Nested control flow in GPU function");

@gpu
func gpu_complex(n) {
    var result = 0;
    var i = 1;
    while (i <= n) {
        if (i % 2 == 0) {
            result = result + i;
        } else {
            result = result - i;
        }
        i = i + 1;
    }
    return result;
}

print("  gpu_complex(10) =", gpu_complex(10));

// Test 7: GPU function with early return
print("\nTest 7: GPU function with early return");

@gpu
func gpu_early_return(x) {
    if (x < 0) {
        return 0;
    }
    if (x == 0) {
        return 1;
    }
    return x * x;
}

print("  gpu_early_return(-5) =", gpu_early_return(-5));
print("  gpu_early_return(0) =", gpu_early_return(0));
print("  gpu_early_return(5) =", gpu_early_return(5));

// Test 8: GPU function with local variables
print("\nTest 8: GPU function with local variables");

@gpu
func gpu_locals(a, b) {
    var x = a * 2;
    var y = b * 3;
    var z = x + y;
    return z;
}

print("  gpu_locals(2, 3) =", gpu_locals(2, 3));

print("\n=== All GPU Edge Cases Tests Passed ===");
